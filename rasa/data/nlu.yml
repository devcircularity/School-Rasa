# Updated nlu.yml - Enhanced with more natural patterns and academic management intents
version: "3.1"

nlu:
# ============================================
# SYNONYMS - Normalize vocabulary variations
# ============================================
- synonym: class
  examples: |
    - grade
    - form
    - stream
    - level
    - jss
    - standard
    - year

- intent: greet
  examples: |
    - hey
    - hello
    - hi
    - hello there
    - good morning
    - good evening
    - hey there
    - good afternoon
    - hi assistant
    - morning
    - howdy

- intent: goodbye
  examples: |
    - bye
    - goodbye
    - cancel
    - quit
    - exit
    - never mind
    - forget it
    - cancel this
    - stop this
    - I want to exit
    - get me out
    - cancel student creation

- intent: affirm
  examples: |
    - yes
    - y
    - indeed
    - of course
    - that sounds good
    - correct
    - absolutely
    - definitely
    - right
    - okay
    - ok

- intent: deny
  examples: |
    - no
    - n
    - never
    - I don't think so
    - don't like that
    - no way
    - not really
    - nope
    - negative
    - cancel that

- intent: bot_challenge
  examples: |
    - are you a bot?
    - are you a human?
    - am I talking to a bot?
    - am I talking to a human?
    - what are you?
    - are you real?

- intent: ask_help
  examples: |
    - help
    - help me
    - what can you do?
    - how can you help?
    - what are your capabilities?
    - show me what you can do
    - assistance
    - guide me
    - what functions do you have?
    - what services do you offer?

- intent: create_student
  examples: |
    # CRITICAL: Bare commands without any entities
    - create student
    - add student
    - new student
    - create a student
    - add a student
    - register student
    - enroll student
    - I want to create a student
    - I need to add a student
    
    # CRITICAL: Comma-separated pattern (name, admission, class)
    - [Joan Nyambu](student_name), [234](admission_no), class [1 Baba](class_name)
    - [Mary Wanjiru](student_name), [123](admission_no), [Grade 5](class_name)
    - [Peter Mwangi](student_name), [456](admission_no), class [8A](class_name)
    - [Sarah Akinyi](student_name), [789](admission_no), [Form 2](class_name)
    - [James Otieno](student_name), [321](admission_no), class [7 Blue](class_name)
    - [Grace Mutua](student_name), [654](admission_no), [6 Red](class_name)
    - [David Kimani](student_name), [987](admission_no), class [5 White](class_name)
    - [Faith Njeri](student_name), [111](admission_no), [9 Green](class_name)
    - [Eric Maina](student_name), [222](admission_no), class [4 East](class_name)
    - [Lucy Chebet](student_name), [333](admission_no), [8 North](class_name)
    - [Moses Kiprop](student_name), [444](admission_no), class [3 A](class_name)
    - [Ann Muthoni](student_name), [555](admission_no), [Form 1 B](class_name)
    - [Paul Macharia](student_name), [666](admission_no), class [JSS 2](class_name)
    - [Jane Wairimu](student_name), [777](admission_no), [PP1](class_name)
    - [Kevin Omondi](student_name), [888](admission_no), class [Grade 7 Marvel](class_name)
    
    # Natural patterns with class having stream names
    - add student [John Doe](student_name) to class [8 Baba](class_name)
    - create student [Mary Jane](student_name) for [7 Mama](class_name)
    - new student [Peter Kim](student_name) in [6 Alpha](class_name)
    - student [Sarah Lee](student_name) class [5 Beta](class_name)
    - add [James Bond](student_name) to [9 Phoenix](class_name)
    - create [Alice Wonder](student_name) in [4 Eagle](class_name)
    - register [Bob Smith](student_name) for [8 Lion](class_name)
    
    # With admission numbers and stream-like class names
    - add [1234](admission_no) [John Smith](student_name) to [Grade 6 Red](class_name)
    - create [5678](admission_no) [Mary Johnson](student_name) for [8 Blue](class_name)
    - new student [9999](admission_no) [Peter Brown](student_name) in [Form 2 A](class_name)
    - student [1111](admission_no) [Sarah Davis](student_name) class [7 White](class_name)
    - add student [2222](admission_no) [James Wilson](student_name) to [JSS 1 Green](class_name)
    
    # Original patterns (keep these too)
    - add student [12345](admission_no) named [John Doe](student_name) to class [8A](class_name)
    - create student [54321](admission_no) [Mary Jane](student_name) in class [7B](class_name)
    - enroll [11111](admission_no) [Jane Smith](student_name) to [Class 6C](class_name)
    - register student [22222](admission_no) [David Kim](student_name) in [5B](class_name)
    - add [33333](admission_no) [Lucy Wanjiku](student_name) to [4A](class_name)
    
    # Simple patterns WITH class
    - add student [John Doe](student_name) to [Grade 4](class_name)
    - create student [Mary Jane](student_name) for [8A](class_name)
    - new student [Peter Kim](student_name) in [Form 1](class_name)
    - student [Sarah Lee](student_name) class [7B](class_name)
    
    # With admission numbers but natural language
    - add [1234](admission_no) [John Smith](student_name) to [Grade 6](class_name)
    - create [5678](admission_no) [Mary Johnson](student_name) for [8B](class_name)
    - new student [9999](admission_no) [Peter Brown](student_name) in [Form 2](class_name)
    
    # WITH # PREFIX
    - add student [John Doe](student_name) [#123](admission_no) to [Grade 4](class_name)
    - create student [Mary Jane](student_name) [#456](admission_no) for [8A](class_name)
    - add student [Peter Kim](student_name) [#789](admission_no) in [Form 1](class_name)
    - new student [Sarah Lee](student_name) [#999](admission_no) to [Grade 5](class_name)


# New follow-up intent for when class is provided separately
- intent: assign_student_to_class
  examples: |
    # CRITICAL: These are for SELECTING existing classes during student creation
    # NOT for creating new classes
    
    # --- MOST COMMON: Direct class name responses (when asked "which class?") ---
    - [1 A](class_name)
    - [2 Red](class_name)
    - [6 White](class_name)
    - [8 White](class_name)
    - [9 Yellow](class_name)
    - [1 Baba](class_name)
    - [2 Green](class_name)
    - [2 Indigo](class_name)
    - [2 Maroon](class_name)
    - [1 Silk](class_name)
    
    # --- "class X" format (very common user response) ---
    - class [1 A](class_name)
    - class [2 Red](class_name)
    - class [6 White](class_name)
    - class [8 White](class_name)
    - class [9 Yellow](class_name)
    - class [1 Baba](class_name)
    - class [2 Green](class_name)
    - class [8 Red](class_name)
    - class [5](class_name)
    - class [1](class_name)
    - class [2](class_name)
    - class [6](class_name)
    - class [8](class_name)
    - class [9](class_name)
    
    # --- "add STUDENT to class X" patterns (student assignment, NOT class creation) ---
    - add the student to class [6](class_name)
    - add the student to class [6 White](class_name)
    - add the student to class [1 A](class_name)
    - add the student to class [2 Red](class_name)
    - add the student to [Grade 4](class_name)
    - add student to class [8A](class_name)
    - put the student in class [6 White](class_name)
    - put the student in class [1 A](class_name)
    - put the student in class [2 Red](class_name)
    - assign the student to [Form 1](class_name)
    - enroll the student in [6 White](class_name)
    - enroll the student in [1 A](class_name)
    - put student in [Grade 5](class_name)
    - assign student to [8 Red](class_name)
    - add them to class [6](class_name)
    - add them to class [1 A](class_name)
    - put them in [6 White](class_name)
    - put them in [2 Red](class_name)
    - add her to class [6 White](class_name)
    - add her to class [1 A](class_name)
    - add him to class [8A](class_name)
    - put her in [Grade 4](class_name)
    - assign to [Grade 4](class_name)
    - enroll in [8 White](class_name)
    - enroll in [1 A](class_name)
    
    # --- Simple class names (when in form context) ---
    - [Grade 4](class_name)
    - [8A](class_name)
    - [Form 1](class_name)
    - [PP1](class_name)
    - [JSS 2](class_name)
    - [6 White](class_name)
    - [8 Red](class_name)
    - [1 Baba](class_name)
    - [2 Green](class_name)
    - [Nursery](class_name)
    
    # --- With "class" keyword ---
    - class [Grade 4](class_name)
    - class [6 White](class_name)
    - class [8A](class_name)
    - in class [Form 1](class_name)
    - to class [6 White](class_name)
    - to class [1 A](class_name)
    
    # --- With "please" ---
    - [Grade 4](class_name) please
    - class [6 White](class_name) please
    - [8 Red](class_name) please
    - [6 White](class_name) please
    - [1 A](class_name) please
    - [2 Red](class_name) please
    
    # --- Existing patterns ---
    - [Grade 2](class_name)
    - [Form 4](class_name)
    - [PP2](class_name)
    - to [Grade 7](class_name)
    - in [Form 2A](class_name)
    - [John](student_name) to [Grade 4](class_name)
    - [Mary](student_name) in [8A](class_name)
    - put [Peter](student_name) in [Form 1](class_name)
    - [Sarah](student_name) should go to [PP1](class_name)
    - assign [James](student_name) to [JSS 2](class_name)
    - [Standard 6](class_name)

- intent: list_students
  examples: |
    - show me the students
    - list all students
    - who is enrolled?
    - give me the student list
    - show student roster
    - display all registered students
    - which students are in the system?
    - get student list
    - all students please
    - give me enrolled students
    - show all students
    - student registry
    - view students
    - display students
    - get all students
    - show me all enrolled students
    - list everyone enrolled
    - student database
    - show student records
    - view all student records

- intent: list_students_by_class
  examples: |
    # --- Core patterns (generic) ---
    - list students in [Class 8](class_name)
    - list students in [Grade 4](class_name)
    - list students in [Form 1](class_name)
    - list students in [JSS 2](class_name)
    - list students in [Standard 6](class_name)
    - show students in [Class 5](class_name)
    - show students in [Grade 3](class_name)
    - show students in [Form 2](class_name)
    - who is in [Class 7](class_name)
    - who is in [Grade 8](class_name)
    - who is in [Form 3](class_name)
    - get students in [PP1](class_name)
    - show [Nursery](class_name) class students
    - list [Baby Class](class_name) students
    - students in [Kindergarten](class_name)

    # --- Compact names (combined level + stream) ---
    - list students in [8A](class_name)
    - list students in [8 Blue](class_name)
    - show [7 Red](class_name) students
    - students in [6A](class_name)
    - list [Form 2A](class_name) students
    - show me [JSS 3B](class_name) students
    - list [Grade 4 Green](class_name) students
    - show [PP2 A](class_name) students

    # --- Natural phrasing (Kenyan school context) ---
    - who are the students in [Grade 2](class_name)
    - show me all students from [Grade 5](class_name)
    - list all students under [Form 4](class_name)
    - show me class [Grade 4](class_name) details
    - show details for [Form 1A](class_name)
    - display [Grade 6](class_name) student list
    - show me [Standard 4](class_name) class info
    - list students from [Primary 3](class_name)
    - show details of [JSS 1](class_name)
    - class [Grade 5](class_name) details

    # --- Lowercase + alternative phrasing (to help generalization) ---
    - show students in class [8a](class_name)
    - show students in grade [4](class_name)
    - show students in form [1](class_name)
    - students in [pp1](class_name)
    - show me [nursery](class_name) details
    - [grade 7](class_name) student list
    - [form 2](class_name) details
    - [class 5](class_name) details
    - [jss 3](class_name) class info
    - [primary 4](class_name) students


- intent: show_unassigned_students
  examples: |
    - show unassigned students
    - list students not enrolled
    - which students are unassigned
    - students without classes
    - show me unassigned students
    - list students not in any class
    - students not enrolled in current term
    - show students without enrollment
    - unassigned student list
    - students not in classes
    - who is not enrolled
    - list unenrolled students
    - show students needing enrollment
    - students without current enrollment
    - which students need classes
    - show me students not enrolled this term
    - list students missing enrollment
    - students not assigned to classes

- intent: list_empty_classes
  examples: |
    - show empty classes
    - list classes with no students
    - which classes are empty
    - classes that have zero students
    - show me classes with no enrollment
    - empty classrooms
    - classes with no one
    - show classes without students
    - list empty classrooms
    - which classes have no students
    - empty classes
    - show me empty classes
    - classes with zero enrollment
    - find empty classes
    - display classes with no students
    - list classes that are empty
    - show vacant classes
    - classes without enrollment
    - which classes need students
    - show me classes with 0 students
    
- intent: search_student
  examples: |
    - student [eric](student_query)
    - find student [john](student_query)
    - search [mary](student_query)
    - student [123](student_query)
    - find [5555](student_query)
    - student [#5555](student_query)
    - search for [john doe](student_query)
    - find student [eric mwirichia](student_query)
    - student [jane smith](student_query)
    - look for [david](student_query)
    - search student [peter](student_query)
    - find [alice wonder](student_query)
    - student [bob](student_query)
    - search for student [carol](student_query)
    - find [99999](student_query)
    - student [#123](student_query)
    - look up [susan](student_query)
    - search [michael johnson](student_query)
    - find student [grace mutua](student_query)
    - student [7777](student_query)
    - search for [faith wanjiru](student_query)
    - find [kevin maina](student_query)
    - student [sarah akinyi](student_query)
    - look for student [timothy](student_query)
    - search [esther njeri](student_query)
    - find [#7777](student_query)
    - student [lucy](student_query)
    - search for [james kariuki](student_query)
    - find student [amina yusuf](student_query)
    - student [brian otieno](student_query)
    # ADD MORE BARE NUMBER PATTERNS
    - student [456](student_query)
    - find [789](student_query)
    - search [1234](student_query)
    - find [54321](student_query)
    - search [333](student_query)
    - student [450](student_query)
    - find [88888](student_query)
    - search [12121](student_query)
    - student [13131](student_query)
    - find [14141](student_query)
    - search [15151](student_query)
    - student [16161](student_query)
    - find [17171](student_query)
    - search [18181](student_query)
    - student [777](student_query)
    - find [8888](student_query)
    - search [2222](student_query)
    - student [3333](student_query)
    - find [4444](student_query)
    - search [6666](student_query)
    - student [9999](student_query)
    - find [111](student_query)
    - search [222](student_query)
    - student [555](student_query)
    - find [666](student_query)
    - search [888](student_query)
    - student [101](student_query)
    - find [202](student_query)
    - search [303](student_query)
    - student [404](student_query)
    - find [505](student_query)
    - search [606](student_query)
    - student [707](student_query)
    - find [808](student_query)
    - search [909](student_query)
    - student [1111](student_query)
    - find [2121](student_query)
    - search [3131](student_query)
    - student [4141](student_query)
    - find [5151](student_query)
    - search [6161](student_query)
    - student [7171](student_query)
    - find [8181](student_query)
    - search [9191](student_query)
    - student [12345](student_query)
    - find [23456](student_query)
    - search [34567](student_query)
    - student [45678](student_query)
    - find [56789](student_query)



- intent: create_class
  examples: |
    # ==========================================
    # IMPORTANT: Only patterns for creating NEW classes
    # MUST have "create/new/make/setup/establish" keyword
    # ==========================================
    
    # ==========================================
    # BASIC CLASS CREATION - ALL VARIATIONS (no streams)
    # ==========================================
    - create class [8](level)
    - create class [7](level)
    - create class [5](level)
    - create grade [8](level)
    - create grade [6](level)
    - create grade [5](level)
    - create form [2](level)
    - create form [1](level)
    - create jss [1](level)
    - create jss [2](level)
    - create standard [6](level)
    - new class [8](level)
    - new grade [7](level)
    - new form [2](level)
    - make class [8](level)
    - make grade [5](level)
    - make form [1](level)
    - create a class [8](level)
    - create a grade [6](level)
    - create new class [8](level)
    - create new grade [7](level)
    - I want to create class [9](level)
    - I want to create grade [5](level)
    - I want to create form [3](level)
    - please create class [5](level)
    - please create grade [8](level)
    - can you create class [7](level)
    - can you create grade [6](level)
    - set up class [PP1](level)
    - set up grade [4](level)
    - set up [PP1](level) class
    - establish [Nursery](level) class
    - establish grade [7](level) class
    - make a new class [4](level)
    - make a new grade [6](level)
    - add class [8](level)
    - add grade [5](level)
    - add form [2](level)
    
    # ==========================================
    # WITH "GRADE" OR FORM LABELS IN ENTITY
    # ==========================================
    - create class [grade 8](level)
    - create class [grade 7](level)
    - create class [grade 5](level)
    - new class [grade 8](level)
    - new class [grade 6](level)
    - make class [Form 1](level)
    - make class [Form 2](level)
    - make class [Form 3](level)
    - create class [Form 2](level)
    - create class [JSS 1](level)
    - create class [JSS 2](level)
    - create class [Standard 6](level)
    - create class [Standard 5](level)
    - set up [Kindergarten](level) for 2025
    - create [grade 6](level) class
    - create [grade 5](level) class
    - create [form 1](level) class
    - create a [grade 5](level) class
    - create a [form 2](level) class
    - I want to create [Form 3](level) class
    - I want to create [grade 8](level) class
    - I want to create [jss 1](level) class
    
    # ==========================================
    # SINGLE STREAM - ALL VARIATIONS
    # ==========================================
    - create class [8](level) [Blue](stream)
    - create class [8](level) [Red](stream)
    - create class [7](level) [Green](stream)
    - create grade [8](level) [Blue](stream)
    - create grade [7](level) [Red](stream)
    - create grade [6](level) [Yellow](stream)
    - create form [2](level) [Alpha](stream)
    - create form [1](level) [A](stream)
    - create jss [1](level) [North](stream)
    - new class [6](level) [Yellow](stream)
    - new grade [5](level) [Green](stream)
    - new form [2](level) [B](stream)
    - make class [5](level) [Gold](stream)
    - make grade [8](level) [Purple](stream)
    - create class [grade 8](level) [Blue](stream)
    - create class [grade 6](level) [Red](stream)
    - create class [form 1](level) [Alpha](stream)
    - create class [6](level) [Purple](stream)
    - new class [5](level) [Pink](stream)
    - create class [7](level) [Silver](stream)
    - I want to create class [8](level) [Blue](stream)
    - I want to create grade [6](level) [Red](stream)
    
    # ==========================================
    # SINGLE STREAM - UNCOMMON COLORS
    # ==========================================
    - create class [6](level) [Maroon](stream)
    - create class [8](level) [Turquoise](stream)
    - create grade [6](level) [Maroon](stream)
    - create grade [7](level) [Indigo](stream)
    - new class [5](level) [Indigo](stream)
    - create class [6](level) [Scarlet](stream)
    - create class [grade 6](level) [Maroon](stream)
    - create class [grade 8](level) [Magenta](stream)
    - create form [1](level) [Crimson](stream)
    - new grade [8](level) [Turquoise](stream)
    
    # ==========================================
    # SINGLE STREAM - NAMES/WORDS
    # ==========================================
    - create class [6](level) [Marvel](stream)
    - create class [8](level) [Eagle](stream)
    - create grade [7](level) [Lion](stream)
    - create grade [6](level) [Falcon](stream)
    - new class [5](level) [Lion](stream)
    - create class [6](level) [Falcon](stream)
    - create class [8](level) [Cheetah](stream)
    - new class [5](level) [Leopard](stream)
    - new grade [6](level) [Phoenix](stream)
    - create class [grade 6](level) [Marvel](stream)
    - create class [grade 8](level) [Excellence](stream)
    - create class [7](level) [Mama](stream)
    - create grade [8](level) [Baba](stream)
    - new class [6](level) [Alpha](stream)
    - new grade [5](level) [Victory](stream)
    
    # ==========================================
    # SINGLE STREAM - DIRECTIONS
    # ==========================================
    - set up class [8](level) [North](stream)
    - create class [7](level) [East](stream)
    - create grade [8](level) [South](stream)
    - new class [6](level) [West](stream)
    - new grade [7](level) [North](stream)
    - create form [2](level) [East](stream)
    
    # ==========================================
    # SINGLE STREAM - GREEK LETTERS
    # ==========================================
    - create class [8](level) [Beta](stream)
    - create class [6](level) [Delta](stream)
    - create grade [7](level) [Alpha](stream)
    - new class [5](level) [Omega](stream)
    - new grade [6](level) [Gamma](stream)
    - create form [1](level) [Beta](stream)
    
    # ==========================================
    # SINGLE STREAM - LETTERS (A-Z)
    # ==========================================
    - create class [Form 1](level) [A](stream)
    - create class [Form 2](level) [B](stream)
    - establish class [JSS 3](level) [C](stream)
    - create class [8](level) [A](stream)
    - create grade [8](level) [A](stream)
    - create grade [7](level) [B](stream)
    - new class [6](level) [C](stream)
    - new grade [5](level) [D](stream)
    - create class [grade 5](level) [D](stream)
    - create class [8](level) [X](stream)
    - create grade [7](level) [Y](stream)
    - new class [6](level) [Z](stream)
    
    # ==========================================
    # MULTIPLE STREAMS - ALL VARIATIONS
    # ==========================================
    - create class [8](level) with streams [Blue](stream) and [Red](stream)
    - create class [5](level) with streams [Red](stream), [Blue](stream) and [Green](stream)
    - create grade [8](level) with streams [Blue](stream) and [Red](stream)
    - create grade [7](level) with streams [Yellow](stream), [Green](stream) and [Purple](stream)
    - create form [1](level) with streams [A](stream) and [B](stream)
    - create form [2](level) with streams [Alpha](stream), [Beta](stream) and [Gamma](stream)
    - new class [7](level) with streams [Yellow](stream) and [Purple](stream)
    - new grade [6](level) with streams [Red](stream) and [Blue](stream)
    - create class [6](level) with streams [White](stream), [Black](stream) and [Gray](stream)
    - make class [9](level) with streams [North](stream) and [South](stream)
    - make grade [8](level) with streams [East](stream) and [West](stream)
    - create class [grade 8](level) with streams [Red](stream) and [Blue](stream)
    - new class [Form 1](level) with streams [A](stream) and [B](stream)
    - create class [4](level) with streams [East](stream), [West](stream) and [North](stream)
    - create grade [5](level) with streams [Lion](stream), [Eagle](stream) and [Falcon](stream)
    - create class [PP1](level) with streams [Red](stream) and [Green](stream)
    - make class [JSS 2](level) with streams [Alpha](stream) and [Beta](stream)
    
    # ==========================================
    # MULTIPLE STREAMS - COMMA-SEPARATED
    # ==========================================
    - create class [8](level) with streams [Blue](stream), [Red](stream), [Green](stream)
    - create grade [7](level) with streams [Yellow](stream), [Purple](stream), [Pink](stream)
    - new class [7](level) with streams [Yellow](stream), [Purple](stream), [Pink](stream)
    - new grade [6](level) with streams [Maroon](stream), [Turquoise](stream), [Indigo](stream)
    - create class [6](level) with streams [Maroon](stream), [Turquoise](stream), [Indigo](stream)
    - make class [5](level) with streams [Eagle](stream), [Lion](stream), [Falcon](stream)
    - make grade [8](level) with streams [Red](stream), [Blue](stream), [Green](stream)
    - create form [1](level) with streams [A](stream), [B](stream), [C](stream)
    
    # ==========================================
    # WITH ACADEMIC YEAR
    # ==========================================
    - create class [Grade 4](level) [A](stream) for [2025](academic_year)
    - create grade [8](level) [Blue](stream) for [2025](academic_year)
    - make class [Form 2](level) [C](stream) [2024](academic_year)
    - make grade [7](level) [Red](stream) [2025](academic_year)
    - set up class [PP1](level) [Red](stream) for year [2025](academic_year)
    - create class [Nursery](level) [A](stream) for [2025](academic_year)
    - new class [Form 3](level) [B](stream) for year [2025](academic_year)
    - new grade [6](level) [Yellow](stream) for year [2025](academic_year)
    - create class called [Standard 6](level) [A](stream) for [2025](academic_year)
    - establish class [Form 1](level) [Blue](stream) for [2025](academic_year)
    - create class [grade 6](level) [Marvel](stream) for [2025](academic_year)
    - create grade [8](level) for [2025](academic_year)
    - create form [2](level) for [2025](academic_year)

    # ==========================================
    # COMPACT NAMES (NAME ENTITY)
    # ==========================================
    - create class [8A](name)
    - create class [Grade 8A](name)
    - new class [9A](name)
    - create class [Form 1A](name)
    - make new class [7B](name)
    - set up class [PP1A](name)
    - create class [Grade 8 Blue](name)
    - I want to create class [9 White](name)
    - create class [6 Marvel](name)
    - new class [8 Phoenix](name)
    - create class [Form 2 Alpha](name)
    - new class [JSS 1 North](name)

# NEW: Separate intent for adding classes (without "create/new/make")
- intent: add_class
  examples: |
    # ONLY "add class X" patterns (for creating new classes)
    # NOT "add student to class X" which is assign_student_to_class
    - add class [8](level)
    - add class [7](level)
    - add a class [7](level)
    - add class [grade 5](level)
    - add class [JSS 1](level)
    - please add class [6](level)
    - can you add class [8](level)
    - add [Baby Class](level) class
    - add [grade 6](level) class
    - add class [8](level) [White](stream)
    - add class [7](level) [Red](stream)
    - add class [9](level) [Orange](stream)
    - please add class [7](level) [Red](stream)
    - add class [7](level) [Violet](stream)
    - add class [9](level) [Crimson](stream)
    - add class [8](level) [Amber](stream)
    - add class [grade 7](level) [Cyan](stream)
    - add class [7](level) [Phoenix](stream)
    - add class [9](level) [Tiger](stream)
    - add class [7](level) [Hawk](stream)
    - add class [6](level) [Panther](stream)
    - add class [grade 7](level) [Victory](stream)
    - add class [8](level) [Baba](stream)
    - add class [8](level) [Alpha](stream)
    - add class [7](level) [Gamma](stream)
    - add class [Form 2](level) [B](stream)
    - add class [7](level) [B](stream)
    - add new class [JSS 1](level) [B](stream) for [2025](academic_year)
    - add class [Grade 1](level) [A](stream) for academic year [2025](academic_year)
    - add class [grade 7](level) [Maroon](stream) for [2025](academic_year)
    - add class [8B](name)
    - add class [JSS 2A](name)
    - add class [Standard 7A](name)
    - add class [7 Maroon](name)

- intent: rename_class
  examples: |
    - rename class [5](class_name) to [55](name)
    - rename class [8A](class_name) to [8 Red](name)
    - change class [Grade 4](class_name) to [Grade 5](name)
    - update class [7](class_name) name to [7 Blue](name)
    - rename [Form 1](class_name) to [Form 1A](name)
    - change [6](class_name) to [6 Alpha](name)
    - update [8A](class_name) to [8 Red](name)

- intent: list_classes
  examples: |
    - show me all classes
    - list all classes
    - what classes do we have?
    - give me the class list
    - show class roster
    - display all classes
    - which classes are available?
    - get class list
    - all classes please
    - show existing classes
    - view all classes
    - display classes
    - get all classes
    - show me the classes
    - list classes
    - class registry
    - view classes
    - what classes are there?
    - show class information
    - class database

- intent: get_student_details
  examples: |
    # Existing patterns
    - show details for [John Doe](student_name)
    - get information about [12345](admission_no)
    - student profile for [Mary Jane](student_name)
    - details of admission [54321](admission_no)
    - show me [Peter Mwangi](student_name) information
    - get details of [77777](admission_no)
    - information about [Lucy Wanjiku](student_name)
    - profile of student [88888](admission_no)
    - show [James Kariuki](student_name) details
    - get student [99999](admission_no) information
    
    # CRITICAL: Add bare number patterns
    - get information about [123](admission_no)
    - about [456](admission_no)
    - information about [789](admission_no)
    - details for [1234](admission_no)
    - show me [5555](admission_no)
    - get details of [7777](admission_no)
    - about [54321](admission_no)
    - information about [88888](admission_no)
    - details for [333](admission_no)
    - show [450](admission_no)
    - get information about [12121](admission_no)
    - about [99999](admission_no)
    - information about [13131](admission_no)
    - details for [14141](admission_no)
    - show me [15151](admission_no)
    - get details of [16161](admission_no)
    - about [17171](admission_no)
    - information about [18181](admission_no)
    
    # With # prefix (already working)
    - get information about [#123](admission_no)
    - about [#456](admission_no)
    - information about [#789](admission_no)
    - details for [#1234](admission_no)
    - show me [#5555](admission_no)

# New Academic Management Intents
- intent: create_academic_year
  examples: |
    - create academic year [2025](academic_year)
    - set up academic year [2024](academic_year)
    - add new academic year [2025](academic_year)
    - establish academic year [2026](academic_year)
    - make academic year [2025](academic_year)
    - create year [2025](academic_year)
    - add year [2024](academic_year)
    - new academic year [2025](academic_year)
    - set up year [2025](academic_year)
    - I want to create academic year [2025](academic_year)
    - please create academic year [2024](academic_year)
    - start a new academic year [2025](academic_year)
    - begin academic year [2026](academic_year)
    - open academic year [2025](academic_year)
    - initialize year [2024](academic_year)
    - can you create academic year [2025](academic_year)
    - let's add academic year [2026](academic_year)
    - create another academic year [2027](academic_year)
    - add academic year for [2025](academic_year)

- intent: create_academic_term
  examples: |
    # Existing patterns
    - create term [1](term)
    - add term [2](term)
    - set up term [3](term)
    - create new term [1](term)
    - establish term [2](term)
    - make term [3](term)
    - add new term [1](term)
    - I want to create term [2](term)
    - please create term [1](term)
    - set up new term [3](term)
    
    # NEW: Add patterns with year
    - add term [1](term) to [2025](academic_year)
    - add term [2](term) to [2025](academic_year)
    - add term [3](term) to [2025](academic_year)
    - create term [1](term) for [2025](academic_year)
    - create term [2](term) for [2025](academic_year)
    - create term [3](term) for [2025](academic_year)
    - add term [1](term) for year [2025](academic_year)
    - add term [2](term) for year [2025](academic_year)
    - add term [3](term) for year [2025](academic_year)
    - create term [1](term) in [2025](academic_year)
    - create term [2](term) in [2025](academic_year)
    - create term [3](term) in [2025](academic_year)
    - set up term [1](term) for [2025](academic_year)
    - set up term [2](term) for [2025](academic_year)
    - set up term [3](term) for [2025](academic_year)
    - establish term [1](term) for [2025](academic_year)
    - establish term [2](term) for [2025](academic_year)
    - establish term [3](term) for [2025](academic_year)
    - make term [1](term) for [2025](academic_year)
    - make term [2](term) for [2025](academic_year)
    - make term [3](term) for [2025](academic_year)
    
    # More natural variations
    - add term [3](term) to academic year [2025](academic_year)
    - create term [1](term) for academic year [2025](academic_year)
    - set up term [2](term) in year [2025](academic_year)
    - add term [3](term) [2025](academic_year)
    - create term [1](term) [2025](academic_year)
    - term [2](term) for [2025](academic_year)
    - term [3](term) [2025](academic_year)
    - add [2025](academic_year) term [1](term)
    - create [2025](academic_year) term [2](term)
    - set up [2025](academic_year) term [3](term)

- intent: check_academic_setup
  examples: |
    - check academic setup
    - show academic status
    - academic setup status
    - check current year and term
    - show me the academic calendar
    - academic system status
    - show current academic info
    - what's the current academic setup
    - overall academic status

- intent: get_current_academic_year
  examples: |
    - what is our current academic year?
    - current academic year
    - what academic year are we in?
    - which academic year is active?
    - show current academic year
    - what year is this?
    - current year
    - academic year status
    - what's the active academic year?
    - show me the current year

- intent: get_current_term
  examples: |
    - what is our current term?
    - current term
    - what term are we in?
    - which term is active?
    - show current term
    - list current term
    - current academic term
    - what's the active term?
    - show me the current term
    - term status
    - which term is running?

- intent: provide_admission_number
  examples: |
    # Numeric admission numbers
    - admission number [12345](admission_no)
    - [54321](admission_no)
    - [#123](admission_no)
    - [#456](admission_no)
    - [#999](admission_no)
    - admission [#123](admission_no)
    - the admission number is [#98765](admission_no)
    - student number [#33333](admission_no)
    - ID number [#44444](admission_no)
    - use admission [#11111](admission_no)
    - make it [#67890](admission_no)

    # Alphanumeric admission numbers
    - [A123](admission_no)
    - [B456](admission_no)
    - [C789](admission_no)
    - [1A2B](admission_no)
    - [007A](admission_no)
    - [X999](admission_no)
    - admission number is [A12](admission_no)
    - the number is [1B7](admission_no)
    - use [K123](admission_no)
    - my admission ID is [2C9](admission_no)
    - student admission [B123](admission_no)

- intent: auto_generate_admission
  examples: |
    - auto generate
    - generate admission number
    - automatically generate
    - auto generate admission
    - generate it automatically
    - create admission number
    - auto assign admission
    - generate one for me
    - make one automatically
    - auto create admission
    - generate admission
    - auto admission
    - create one automatically
    - generate student number
    - auto generate number
    - let the system generate
    - system generate admission

- intent: deactivate_academic_year
  examples: |
    - deactivate academic year [2025](academic_year)
    - close academic year [2024](academic_year)
    - end academic year [2025](academic_year)
    - make academic year [2024](academic_year) inactive
    - stop academic year [2025](academic_year)
    - deactivate current academic year
    - close current year
    - end current academic year
    - make current year inactive

- intent: activate_academic_year
  examples: |
    - activate academic year [2025](academic_year)
    - activate year [2024](academic_year)
    - make academic year [2025](academic_year) active
    - set academic year [2026](academic_year) as current
    - enable academic year [2025](academic_year)
    - turn on academic year [2024](academic_year)
    - activate [2025](academic_year)
    - make [2024](academic_year) active
    - start academic year [2025](academic_year)


- intent: promote_students
  examples: |
    - promote students to next term
    - move students to term [2](target_term)
    - promote all students to term [3](target_term)
    - roll over students to next term
    - advance students from term [1](source_term) to term [2](target_term)
    - promote current students to term [2](target_term)
    - move students from [current](source_term) to term [3](target_term)
    - student promotion to term [2](target_term)
    - enroll students in next term
    - transfer students to term [3](target_term)
    - promote students
    - advance students
    - move to next term
    
    # ADD THESE CLEARER PATTERNS
    - promote students to term [1](target_term)
    - promote students to term [2](target_term)
    - promote students to term [3](target_term)
    - promote to term [1](target_term)
    - promote to term [2](target_term)
    - promote to term [3](target_term)
    - move students to term [1](target_term)
    - move students to term [3](target_term)
    - advance to term [1](target_term)
    - advance to term [2](target_term)
    - advance to term [3](target_term)
    - promote all students to term [1](target_term)
    - promote all students to term [3](target_term)
    - enroll students in term [1](target_term)
    - enroll students in term [2](target_term)
    - enroll students in term [3](target_term)


- intent: activate_term
  examples: |
    - activate term [1](term)
    - activate term [2](term)
    - activate term [3](term)
    - make term [1](term) active
    - start term [2](term)
    - enable term [3](term)
    - turn on term [1](term)
    - activate [1](term)
    - activate [2](term)
    - activate [3](term)
    - start term [1](term)
    - start term [2](term)
    - start term [3](term)
    - begin term [1](term)
    - begin term [2](term)
    - begin term [3](term)
    - set term [1](term) as active
    - set term [2](term) as active
    - set term [3](term) as active
    - make [1](term) active
    - make [2](term) active
    - make [3](term) active
    - switch to term [1](term)
    - switch to term [2](term)
    - switch to term [3](term)
    - change to term [1](term)
    - change to term [2](term)
    - change to term [3](term)

- intent: list_academic_terms
  examples: |
    - list academic terms
    - show academic terms
    - list all academic terms
    - show all terms
    - how many terms do we have
    - how many terms do we have in [2025](academic_year)
    - what terms are available
    - show terms for [2025](academic_year)
    - list terms in [2024](academic_year)
    - display all terms
    - get all academic terms
    - show me the terms
    - what academic terms exist
    - terms in the system
    - available terms

- intent: reenroll_student
  examples: |
    - re-enroll [Eric Mwirichia](student_name) to [8A](class_name)
    - assign [John Doe](student_name) to [Grade 4](class_name) for current term
    - enroll [Eric](student_name) in [8A](class_name) for this term
    - re-assign [John](student_name) to [Grade 4](class_name)
    - move [Eric Mwirichia](student_name) back to [8A](class_name)
    - put [John Doe](student_name) in [Grade 4](class_name) for term 3
    - enroll [5555](admission_no) in [8A](class_name) for current term
    - re-enroll [123](admission_no) to [Grade 4](class_name)
    - assign student [Eric](student_name) to class [8A](class_name)
    - move student [John](student_name) to [Grade 4](class_name)
    - enroll [Alice Wonder](student_name) in [Grade 1](class_name)
    - re-assign [Brian Otieno](student_name) to [6A](class_name)
    - put [Susan Chebet](student_name) back in [2A](class_name)
    - assign [Mwamba Maina](student_name) to [Grade 4](class_name) for this term

- intent: create_fee_structure
  examples: |
    # With custom names only
    - create fee structure named [Standard Package](structure_name) for [2025](academic_year) term [1](term)
    - create fee structure called [Premium Fees](structure_name) [2025](academic_year) term [2](term)
    - new fee structure [Day Scholar Rates](structure_name) for [2025](academic_year) term [3](term)
    - create [Boarders Package](structure_name) fee structure [2025](academic_year) term [1](term)
    - setup fee structure named [Basic Fees](structure_name) [2025](academic_year) term [2](term)
    - add fee structure called [Complete Package](structure_name) for [2025](academic_year) term [1](term)
    - new [Standard Rates](structure_name) fee structure [2024](academic_year) term [3](term)
    - create fee structure [Economy Plan](structure_name) for [2025](academic_year) term [2](term)
    - setup [Premium Plan](structure_name) fees [2025](academic_year) term [1](term)
    - add [Basic Plan](structure_name) fee structure [2025](academic_year) term [3](term)
    
    # With level and custom name
    - create fee structure [Grade 4 Standard](structure_name) for [Grade 4](level) [2025](academic_year) term [1](term)
    - setup [Form 1 Complete Package](structure_name) for [Form 1](level) [2025](academic_year) term [2](term)
    - new [JSS 2 Premium](structure_name) fee structure for [JSS 2](level) [2025](academic_year) term [3](term)
    - create [PP1 Basic Fees](structure_name) for [PP1](level) [2024](academic_year) term [1](term)
    - add [Grade 5 Full Package](structure_name) fee structure for [Grade 5](level) [2025](academic_year) term [2](term)
    - setup [Form 2 Standard](structure_name) for [Form 2](level) [2025](academic_year) term [1](term)
    - create fee structure [Grade 3 Economy](structure_name) for [Grade 3](level) [2025](academic_year) term [3](term)
    - new [JSS 1 Premium Plan](structure_name) for [JSS 1](level) [2024](academic_year) term [1](term)
    
    # With level only (no custom name)
    - create fee structure for [Grade 4](level) [2025](academic_year) term [1](term)
    - setup fees for [Grade 4](level) [2025](academic_year) term [2](term)
    - add fee schedule for [Form 1](level) [2026](academic_year) term [1](term)
    - create fees for [JSS 2](level) [2025](academic_year) term [3](term)
    - new fee structure for [Form 1](level) [2024](academic_year) term [1](term)
    - fee structure for [PP1](level) [2025](academic_year) term [2](term)
    - create [Grade 5](level) fees for [2025](academic_year) term [1](term)
    - setup [Nursery](level) fee structure [2024](academic_year) term [3](term)
    - add fees for [Form 3](level) [2025](academic_year) term [2](term)
    - create [Grade 2](level) fee structure [2025](academic_year) term [1](term)
    - new [JSS 3](level) fees [2025](academic_year) term [3](term)
    - setup fee structure for [Grade 7](level) [2024](academic_year) term [1](term)
    
    # Without level or custom name (defaults to ALL)
    - create fee structure for [2025](academic_year) term [3](term)
    - create a fee structure for academic year [2025](academic_year) term [3](term)
    - add fees for [2025](academic_year) term [2](term)
    - setup fees [2024](academic_year) term [3](term)
    - new fees for [2025](academic_year) term [1](term)
    - create fee structure year [2025](academic_year) term [3](term)
    - fees for [2025](academic_year) term [2](term)
    - fee structure for academic year [2025](academic_year) term [1](term)
    - create fee structure for [2024](academic_year) term [1](term)
    - setup fee structure [2025](academic_year) term [2](term)
    - add fee structure [2025](academic_year) term [3](term)
    - new fee structure for [2024](academic_year) term [2](term)
    
    # Mixed natural language patterns
    - create a fee structure for [Grade 4](level) [2025](academic_year) term [3](term)
    - setup [Form 2](level) fees [2025](academic_year) term [1](term)
    - new fee structure [Grade 7](level) year [2025](academic_year) term [2](term)
    - add fee structure for [JSS 1](level) academic year [2025](academic_year) term [3](term)
    - create fees for [PP2](level) in [2024](academic_year) term [1](term)
    - setup a fee structure for [Grade 6](level) [2025](academic_year) term [2](term)
    - make fee structure for [Form 4](level) [2025](academic_year) term [1](term)
    - add fees for [Grade 8](level) academic year [2024](academic_year) term [3](term)
    
    # With "named" keyword variations
    - create fee structure named [Deluxe Package](structure_name) [2025](academic_year) term [1](term)
    - setup fee structure called [Budget Plan](structure_name) [2025](academic_year) term [2](term)
    - new fee structure titled [Executive Fees](structure_name) [2025](academic_year) term [3](term)
    - add fee structure named [Silver Plan](structure_name) for [2024](academic_year) term [1](term)
    - create [Gold Package](structure_name) fee structure for [2025](academic_year) term [2](term)
    
    # With level and "named" variations
    - create [Grade 4](level) fee structure named [Standard](structure_name) for [2025](academic_year) term [1](term)
    - setup [Form 1](level) fees called [Premium](structure_name) [2025](academic_year) term [2](term)
    - new [JSS 2](level) fee structure [Complete](structure_name) for [2025](academic_year) term [3](term)
    - add [Grade 5](level) fees named [Basic](structure_name) [2024](academic_year) term [1](term)
    - create fee structure for [PP1](level) called [Starter Package](structure_name) [2025](academic_year) term [2](term)


- intent: list_fee_structures
  examples: |
    - show me all fee structures
    - list fee structures
    - what fee structures do we have
    - do we have a fee structure
    - show fee structures
    - list all fees
    - display fee structures
    - get fee structures
    - show our fee structures
    - list our fee structures
    - what fees are set up
    - show me the fees
    - fee structures
    - list fees
    - show fees
    - view fee structures
    - display all fee structures
    - what fee structures exist
    - do we have fees set up
    - are there any fee structures
    - check fee structures
    - see fee structures
    - show me fee structures
    
    # With year/term filters
    - list fee structures for term [3](term)
    - show fee structures for [2025](academic_year) term [1](term)
    - fee structures for [2025](academic_year) term [3](term)
    - list fees for term [2](term)
    - show [2025](academic_year) fee structures
    - fees for [2024](academic_year) term [1](term)
    - list fee structures for academic year [2025](academic_year)
    - show term [3](term) fee structures
    - display fees for [2025](academic_year) term [2](term)
    - get fee structures for term [1](term)
    - what fee structures for [2025](academic_year)
    - show me fees for term [3](term)
    - fee structures [2025](academic_year) term [1](term)

- intent: generate_invoices
  examples: |
    - generate invoices for [Grade 5](class_name) [2025](academic_year) term [1](term)
    - create invoices for all students [2025](academic_year) term [2](term)
    - issue invoices for [2025](academic_year) term [3](term)
    - generate invoices [2024](academic_year) term [1](term)
    - create bills for [Form 2](class_name) [2025](academic_year) term [2](term)

- intent: get_invoice
  examples: |
    - show my invoice
    - get invoice for [Eric](student_name)
    - show fees for [12345](admission_no)
    - get current term bill
    - invoice for [John Doe](student_name)
    - show [5555](admission_no) invoice
    - my child's invoice
    - fees for [Mary](student_name)

    - show details for [John Doe](student_name)
    - get information about [12345](admission_no)
    - student profile for [Mary Jane](student_name)
    - details of admission [54321](admission_no)
    - show me [Peter Mwangi](student_name) information
    - get details of [77777](admission_no)
    - information about [Lucy Wanjiku](student_name)
    - profile of student [88888](admission_no)
    - show [James Kariuki](student_name) details
    - get student [99999](admission_no) information
    
    # CRITICAL: Add bare number patterns
    - get information about [123](admission_no)
    - about [456](admission_no)
    - information about [789](admission_no)
    - details for [1234](admission_no)
    - show me [5555](admission_no)
    - get details of [7777](admission_no)
    - about [54321](admission_no)
    - information about [88888](admission_no)
    - details for [333](admission_no)
    - show [450](admission_no)
    - get information about [12121](admission_no)
    - about [99999](admission_no)
    - information about [13131](admission_no)
    - details for [14141](admission_no)
    - show me [15151](admission_no)
    
    # With # prefix (already working)
    - get information about [#123](admission_no)
    - about [#456](admission_no)
    - information about [#789](admission_no)
    - details for [#1234](admission_no)
    - show me [#5555](admission_no)
    
    # NEW: Invoice-specific patterns
    - show invoice for [Eric](student_name)
    - get invoice for [John Doe](student_name)
    - show fees for [12345](admission_no)
    - get current term bill
    - invoice for [John Doe](student_name)
    - show [5555](admission_no) invoice
    - my child's invoice
    - fees for [Mary](student_name)
    - show invoice for [7777](admission_no)
    - get invoice for [#7777](admission_no)
    - invoice for [Eric Mwirichia](student_name)
    - show fees for [Brian](student_name)
    - get invoice for student [5555](admission_no)
    - show invoice for admission [7777](admission_no)
    - fees for [#5555](admission_no)
    - invoice for [Alice Wonder](student_name)
    - show bill for [123](admission_no)
    - get invoice [7777](admission_no)
    - show invoice [Brian](student_name)
    - invoice [5555](admission_no)
    
    # NEW: Name + Number patterns (most natural)
    - show invoice for [Brian](student_name) [7777](admission_no)
    - get invoice for [Eric](student_name) [5555](admission_no)
    - invoice for [John](student_name) [123](admission_no)
    - show fees for [Mary](student_name) [456](admission_no)
    - get invoice for [Alice](student_name) [#789](admission_no)
    - show invoice for [Peter](student_name) [#1234](admission_no)
    - fees for [Sarah](student_name) [999](admission_no)
    - invoice for [James](student_name) [#777](admission_no)
    - show invoice for [Grace](student_name) [888](admission_no)
    - get invoice for [David](student_name) [555](admission_no)
    - show fees for [Lucy](student_name) [#333](admission_no)
    - invoice for [Michael](student_name) [444](admission_no)
    - show invoice for [Susan](student_name) [#666](admission_no)
    - get invoice for [Daniel](student_name) [222](admission_no)
    - fees for [Faith](student_name) [111](admission_no)
    - show invoice [Brian Otieno](student_name) [7777](admission_no)
    - get invoice [Eric Mwirichia](student_name) [5555](admission_no)
    - invoice [John Doe](student_name) [123](admission_no)
    - show fees [Mary Jane](student_name) [456](admission_no)

    # NEW: "invoice student X" patterns
    - invoice student [Eric Mwirichia](student_name)
    - invoice student [John Doe](student_name)
    - invoice student [Brian Otieno](student_name)
    - invoice student [#5555](admission_no)
    - invoice student [#123](admission_no)
    - invoice student [Mary Jane](student_name)
    - invoice for student [Eric](student_name)
    - invoice for student [#7777](admission_no)
    - get invoice student [Alice Wonder](student_name)
    - show invoice student [Peter Kim](student_name)
    - invoice [Eric Mwirichia](student_name)
    - invoice [#5555](admission_no)
    - invoice [John Doe](student_name)
    
    # Combined patterns
    - invoice [Eric](student_name) [#5555](admission_no)
    - invoice student [Brian](student_name) [#7777](admission_no)
    - get invoice [John](student_name) [#123](admission_no)
    - show invoice [Mary](student_name) [456](admission_no)

    # CRITICAL: "invoice student X" patterns (most natural)
    - invoice student [Eric Mwirichia](student_name)
    - invoice student [John Doe](student_name)
    - invoice student [Brian Otieno](student_name)
    - invoice student [Mary Jane](student_name)
    - invoice student [Alice Wonder](student_name)
    - invoice student [Peter Kim](student_name)
    - invoice student [Sarah Lee](student_name)
    - invoice student [James Bond](student_name)
    - invoice student [Grace Mutua](student_name)
    - invoice student [David Wilson](student_name)
    
    # With admission numbers
    - invoice student [#5555](admission_no)
    - invoice student [#123](admission_no)
    - invoice student [#7777](admission_no)
    - invoice student [5555](admission_no)
    - invoice student [123](admission_no)
    - invoice student [7777](admission_no)
    
    # Shorter forms
    - invoice [Eric Mwirichia](student_name)
    - invoice [John Doe](student_name)
    - invoice [Brian](student_name)
    - invoice [#5555](admission_no)
    - invoice [5555](admission_no)
    
    # "get invoice for student X"
    - get invoice for student [Eric Mwirichia](student_name)
    - get invoice for student [John Doe](student_name)
    - get invoice for student [#5555](admission_no)
    - show invoice for student [Brian Otieno](student_name)
    - show invoice for student [7777](admission_no)
    
    # Combined name + number
    - invoice student [Eric](student_name) [#5555](admission_no)
    - invoice student [Brian](student_name) [#7777](admission_no)
    - invoice student [John](student_name) [123](admission_no)
    - invoice [Eric](student_name) [5555](admission_no)
    - invoice [Brian](student_name) [7777](admission_no)

- intent: add_fee_item
  examples: |
    # Basic patterns
    - add tuition fee of [25000](amount) to [Term 3 2025](structure_name)
    - add [transport](fee_type) fee of [5000](amount) to [Standard Package](structure_name)
    - add [exam](fee_type) fee of [2500](amount) to [Term 1 2025](structure_name)
    - add [boarding](fee_type) fee of [15000](amount) to [Premium Fees](structure_name)
    - add [lunch](fee_type) fee of [3000](amount) to [Day Scholar Rates](structure_name)
    
    # With commas in amounts
    - add tuition fee of [25,000](amount) to [Term 3 2025](structure_name)
    - add transport fee of [5,000](amount) to [Standard Package](structure_name)
    - add exam fee of [2,500](amount) to [Term 1 2025](structure_name)
    
    # Different phrasing
    - add a [tuition](fee_type) fee of [25000](amount) to [Term 3 2025](structure_name)
    - include [lab](fee_type) fee of [3000](amount) in [Grade 4 Standard](structure_name)
    - set [materials](fee_type) fee to [1500](amount) for [Term 2 2025](structure_name)
    - create [activity](fee_type) fee of [2000](amount) for [Basic Fees](structure_name)
    
    # With "for [level]" specificity
    - add [tuition](fee_type) fee of [25000](amount) for [Grade 4](level) to [Term 3 2025](structure_name)
    - add [lab](fee_type) fee of [3000](amount) for [Form 1](level) to [Standard Package](structure_name)
    - add [boarding](fee_type) fee of [15000](amount) for [JSS 2](level) only
    
    # Short forms
    - add tuition [25000](amount) to [Term 3 2025](structure_name)
    - add transport [5000](amount) to [Standard Package](structure_name)
    - add exam [2500](amount) to [Term 1 2025](structure_name)

    # CRITICAL: Add patterns that reference term/year directly
    - add tuition fee of [25000](amount) to term [3](term) [2025](academic_year)
    - add [transport](fee_type) fee of [5000](amount) to term [1](term) [2025](academic_year)
    - add [exam](fee_type) of [2500](amount) to [2025](academic_year) term [2](term)
    - add tuition [25000](amount) to [2025](academic_year) term [3](term)
    - add [boarding](fee_type) fee [15000](amount) to term [1](term)
    - add [lunch](fee_type) [3000](amount) to current term
    - add tuition of [25,000](amount) to term [3](term) [2025](academic_year)
    - add [lab](fee_type) fee of [3,000](amount) for term [2](term) [2025](academic_year)
    - add [materials](fee_type) [1500](amount) to [2024](academic_year) term [1](term)
    - add [activity](fee_type) fee of [2000](amount) to this term
    - add tuition [25000](amount) for current term
    - add [transport](fee_type) [5000](amount) term [3](term) [2025](academic_year)


- intent: view_fee_structure_details
  examples: |
    - which are these fee items?
    - show fee items for [Term 3 2025](structure_name)
    - what fee items are in [Term 3 2025](structure_name)
    - show me the fee breakdown for [Term 3 2025](structure_name)
    - list fee items in [Standard Package](structure_name)
    - what fees are in [Term 3 2025](structure_name)
    - show details of [Term 3 2025](structure_name)
    - breakdown of [Term 3 2025](structure_name)
    - show me what's in [Term 3 2025](structure_name)
    - fee items for [Term 3 2025](structure_name)
    - what's included in [Term 3 2025](structure_name)
    - view [Term 3 2025](structure_name) items
    - show fee structure [Term 3 2025](structure_name)
    - show fee structure items for [term 3 2025](structure_name)
    - show [Term 3 2025](structure_name) structure
    - view [Term 3 2025](structure_name)
    - display fee structure [Term 3 2025](structure_name)
    - fee structure details for [term 3 2025](structure_name)
    - list fee items in [term 3](term) of [2025](academic_year)
    - list fee items in [term 3 2025](structure_name)
    - show items for [term 3 2025](structure_name)


- intent: delete_fee_items
  examples: |
    - clear the fee items for [term 3 2025](structure_name)
    - remove all fee items from [Term 3 2025](structure_name)
    - delete fee items for [term 3 2025](structure_name)
    - clear fees for [Term 3 2025](structure_name)
    - remove all fees from [Standard Package](structure_name)
    - delete all fee items in [Term 3 2025](structure_name)
    - clear all items from [Term 3 2025](structure_name)
    - wipe fee items for [term 3 2025](structure_name)

- intent: delete_specific_fee_item
  examples: |
    - delete [tuition](fee_type) fee from [Term 3 2025](structure_name)
    - remove [transport](fee_type) fee from [Term 3 2025](structure_name)
    - delete the [exam](fee_type) fee in [Term 3 2025](structure_name)
    - remove [boarding](fee_type) from [Term 3 2025](structure_name)
    - delete [lunch](fee_type) fee for [term 3 2025](structure_name)

- intent: publish_fee_structure
  examples: |
    # With structure name only
    - publish fee structure for [Term 1 2025](structure_name)
    - publish [Term 3 2025](structure_name)
    - publish fee structure [Standard Package](structure_name)
    - make [Term 1 2025](structure_name) live
    - activate fee structure [Term 3 2025](structure_name)
    - finalize [Term 1 2025](structure_name)
    - publish [Premium Fees](structure_name)
    - finalize [Standard Package](structure_name)
    
    # With term and year (FIXED - only annotate the NUMBER)
    - publish term [1](term) [2025](academic_year)
    - publish term [2](term) [2025](academic_year)
    - publish term [3](term) [2025](academic_year)
    - publish fee structure for term [1](term) [2025](academic_year)
    - publish fee structure for term [3](term) [2025](academic_year)
    - make term [2](term) [2025](academic_year) live
    - publish [2025](academic_year) term [1](term)
    - publish [2024](academic_year) term [3](term)
    - finalize term [1](term) [2025](academic_year)
    - activate term [2](term) for [2025](academic_year)
    - publish fees for term [3](term) [2025](academic_year)
    
    # With just term (no year) - common user pattern
    - publish term [1](term) fee structure
    - publish term [2](term) fees
    - publish term [3](term) fee structure
    - finalize term [1](term)
    - make term [2](term) live
    - activate term [3](term)
    - publish term [1](term)
    - publish term [2](term)
    - publish term [3](term)
    
    # Natural variations
    - publish fee structure term [1](term)
    - publish fees term [2](term)
    - make term [3](term) fee structure live
    - finalize fees for term [1](term)

- intent: delete_class
  examples: |
    - delete class [8a](class_name)
    - remove class [Grade 4](class_name)
    - delete [Form 1](class_name)
    - remove [8A](class_name) class
    - delete the class [PP1](class_name)
    - remove the [JSS 2](class_name) class



- intent: set_structure_as_default
  examples: |
    - make [Term 3 2025](structure_name) the default
    - set [Term 3 2025](structure_name) as default
    - make [Standard Package](structure_name) default for term [3](term)
    - set [Term 3 2025](structure_name) as the default structure
    - use [Term 3 2025](structure_name) as default
    - default should be [Term 3 2025](structure_name)
    - make [Premium Fees](structure_name) the default for [2025](academic_year) term [1](term)


- intent: affirm_set_default
  examples: |
    - yes, make it default
    - yes make it the default
    - make it default
    - set as default
    - yes set it as default
    - make this default
    - yes please make it default
    - okay make it default
    - sure, set it as default

- intent: deny_set_default
  examples: |
    - no, keep current default
    - no keep it
    - don't make it default
    - I'll set it later
    - not now
    - skip
    - maybe later
    - no thanks
    - not right now
    - skip setting default


- intent: issue_invoices
  examples: |
    # Year FIRST, then term
    - issue invoices for [2025](academic_year) term [3](term)
    - issue all invoices for [2025](academic_year) term [1](term)
    - send invoices for [2025](academic_year) term [1](term)
    - publish invoices for [2025](academic_year) term [2](term)
    - issue invoices for [2024](academic_year) term [3](term)
    - send out invoices for [2025](academic_year) term [1](term)
    - release invoices for [2025](academic_year) term [2](term)
    - issue term [3](term) invoices for [2025](academic_year)
    - send invoices [2025](academic_year) term [1](term)
    - issue invoices [2025](academic_year) term [3](term)
    - publish invoices [2025](academic_year) term [2](term)
    - release fee invoices for [2025](academic_year) term [1](term)
    - issue billing for [2025](academic_year) term [3](term)
    
    # Term FIRST, then year
    - publish invoices for term [2](term) [2025](academic_year)
    - issue invoices for term [3](term) [2025](academic_year)
    - send invoices for term [1](term) [2025](academic_year)
    - publish term [3](term) [2025](academic_year) invoices
    - issue all draft invoices for term [3](term) [2025](academic_year)
    - send out all invoices for term [1](term) [2025](academic_year)
    - notify parents about term [3](term) [2025](academic_year) fees
    
    # With class
    - issue invoices for [Grade 4](class_name) [2025](academic_year) term [3](term)
    - send [8A](class_name) invoices for [2025](academic_year) term [3](term)
    - issue invoices for [Grade 4](class_name) term [3](term) [2025](academic_year)
    
    # Just term (no year)
    - issue all invoices for term [3](term)
    - send [8A](class_name) invoices for term [3](term)
    - issue term [3](term) invoices
    - issue term [1](term)
    - send term [2](term) invoices
    
    # Generic (no term/year)
    - issue invoices
    - send invoices


- intent: list_invoices
  examples: |
    - show invoices for [2025](academic_year) term [3](term)
    - list all invoices for [2025](academic_year) term [1](term)
    - show all invoices for term [3](term) [2025](academic_year)
    - display invoices for [2024](academic_year) term [2](term)
    - get all invoices for [2025](academic_year) term [3](term)
    - invoices for term [1](term) [2025](academic_year)
    - show me all invoices for [2025](academic_year) term [3](term)
    - list invoices [2025](academic_year) term [3](term)

- intent: list_invoices_by_class
  examples: |
    # CRITICAL: Properly separated entities - Class, Term, Year
    - show invoices for [Grade 4](class_name) [2025](academic_year) term [1](term)
    - show invoices for [Grade 5B](class_name) [2025](academic_year) term [3](term)
    - show invoices for [Grade 5B](class_name) Term [3](term) [2025](academic_year)
    - show invoices for [8A](class_name) [2025](academic_year) term [3](term)
    - list [8A](class_name) invoices for [2025](academic_year) term [3](term)
    - invoices for [Form 1](class_name) term [2](term) [2025](academic_year)
    - show [Grade 4](class_name) invoices [2025](academic_year) term [1](term)
    - get invoices for [JSS 2](class_name) [2025](academic_year) term [1](term)
    - show [Grade 1](class_name) term [3](term) [2025](academic_year) invoices
    - invoices for [PP1](class_name) term [1](term) [2024](academic_year)
    - list [Nursery](class_name) invoices term [2](term) [2025](academic_year)
    - show [2A](class_name) invoices for term [1](term) [2025](academic_year)
    - display [Form 2B](class_name) invoices [2025](academic_year) term [2](term)
    - get [Grade 6A](class_name) invoices term [3](term) [2025](academic_year)
    - show [JSS 1A](class_name) term [1](term) [2025](academic_year) invoices
    - list invoices [Grade 7](class_name) [2025](academic_year) term [2](term)
    - [Grade 3B](class_name) invoices for [2025](academic_year) term [3](term)
    - show [Form 4](class_name) invoices for term [1](term) [2025](academic_year)
    - get [Grade 8](class_name) [2024](academic_year) term [2](term) invoices
    - list [PP2](class_name) term [3](term) [2025](academic_year) invoices
    
    # With "for" variations
    - show invoices for [Grade 5B](class_name) for term [3](term) [2025](academic_year)
    - list invoices for [8A](class_name) for [2025](academic_year) term [1](term)
    - get invoices for [Form 1](class_name) for term [2](term) [2025](academic_year)
    
    # Year/Term first (harder but should work)
    - show [2025](academic_year) term [1](term) invoices for [Grade 4](class_name)
    - list term [3](term) [2025](academic_year) invoices for [Grade 5B](class_name)
    - [2025](academic_year) term [2](term) [8A](class_name) invoices
    
    # Without explicit "term" keyword
    - show invoices for [Grade 4](class_name) [2025](academic_year) [1](term)
    - invoices for [8A](class_name) [2025](academic_year) [3](term)
    - [Grade 5B](class_name) [2025](academic_year) [3](term) invoices
    
    # Natural language variations
    - what are the invoices for [Grade 4](class_name) in term [1](term) of [2025](academic_year)
    - show me [Grade 5B](class_name) invoices from term [3](term) [2025](academic_year)
    - get the invoices for [8A](class_name) students for [2025](academic_year) term [3](term)

- intent: list_unpaid_invoices
  examples: |
    # Generic (no year/term specified - should use current)
    - show unpaid invoices
    - get unpaid invoices
    - list outstanding invoices
    - unpaid invoices
    - which students haven't paid
    - who hasn't paid fees
    - outstanding balances
    - show balances
    - unpaid fees
    
    # CRITICAL: Year FIRST, then term - with "term" keyword
    - show me unpaid invoices for [2025](academic_year) term [3](term)
    - unpaid invoices for [2025](academic_year) term [3](term)
    - outstanding balances for [2025](academic_year) term [3](term)
    - get unpaid invoices for [2025](academic_year) term [1](term)
    - show outstanding for [2025](academic_year) term [2](term)
    - outstanding invoices [2025](academic_year) term [3](term)
    - get unpaid for [2024](academic_year) term [2](term)
    - show unpaid [2025](academic_year) term [1](term)
    - unpaid invoices [2025](academic_year) term [3](term)
    - who hasn't paid [2025](academic_year) term [3](term) fees
    - show balances for [2025](academic_year) term [3](term)
    - list unpaid for [2025](academic_year) term [1](term)
    - outstanding for [2025](academic_year) term [2](term)
    - get outstanding [2025](academic_year) term [3](term)
    - show unpaid invoices [2025](academic_year) term [1](term)
    - unpaid balances [2025](academic_year) term [2](term)
    - outstanding invoices for [2025](academic_year) term [3](term)
    - get unpaid invoices [2025](academic_year) term [1](term)
    - show outstanding invoices [2025](academic_year) term [2](term)
    - list unpaid [2025](academic_year) term [3](term)
    - unpaid for [2026](academic_year) term [1](term)
    - outstanding [2024](academic_year) term [3](term)
    - show me outstanding [2025](academic_year) term [1](term)
    - get unpaid [2025](academic_year) term [2](term)
    - unpaid invoices for year [2025](academic_year) term [3](term)
    
    # Year FIRST, term SECOND - without "term" keyword (harder)
    - unpaid invoices for [2025](academic_year) [3](term)
    - get unpaid for [2025](academic_year) [1](term)
    - outstanding [2024](academic_year) [2](term)
    - show unpaid [2025](academic_year) [3](term)
    - unpaid for [2025](academic_year) [1](term)
    - outstanding invoices [2025](academic_year) [3](term)
    - show me unpaid [2025](academic_year) [3](term)
    - get outstanding [2025](academic_year) [2](term)
    - list unpaid [2025](academic_year) [1](term)
    - unpaid balances [2025](academic_year) [3](term)
    
    # Term FIRST, then year - with "term" keyword
    - unpaid invoices for term [3](term) [2025](academic_year)
    - get unpaid invoices for term [1](term) [2025](academic_year)
    - outstanding for term [2](term) [2025](academic_year)
    - unpaid term [3](term) [2025](academic_year)
    - show unpaid for term [3](term) [2025](academic_year)
    - list outstanding term [1](term) [2025](academic_year)
    - get unpaid term [2](term) [2025](academic_year)
    - outstanding invoices term [3](term) [2025](academic_year)
    - show balances term [1](term) [2025](academic_year)
    - unpaid for term [2](term) [2025](academic_year)
    - outstanding term [3](term) [2024](academic_year)
    - show unpaid term [1](term) [2025](academic_year)
    - unpaid invoices term [2](term) [2025](academic_year)
    - get outstanding term [3](term) [2025](academic_year)
    
    # Term FIRST, year SECOND - without "term" keyword
    - unpaid invoices for [3](term) [2025](academic_year)
    - outstanding for [1](term) [2025](academic_year)
    - get unpaid [2](term) [2025](academic_year)
    - show unpaid [3](term) [2025](academic_year)
    - unpaid [1](term) [2025](academic_year)
    - outstanding [3](term) [2024](academic_year)
    
    # With class specified
    - show unpaid invoices for [Grade 4](class_name) [2025](academic_year) term [3](term)
    - get outstanding invoices for [8A](class_name) [2025](academic_year) term [3](term)
    - unpaid invoices for [Grade 4](class_name)
    - outstanding for [Form 1](class_name) [2025](academic_year) term [1](term)
    - show unpaid [Grade 5B](class_name) [2025](academic_year) term [3](term)
    - get unpaid for [8A](class_name) term [3](term) [2025](academic_year)
    - outstanding [Grade 4](class_name) invoices [2025](academic_year) term [2](term)
    - unpaid invoices [Grade 1](class_name) [2025](academic_year) term [1](term)
    
    # Just term (no year - should use current year)
    - unpaid invoices for term [3](term)
    - show unpaid for term [1](term)
    - outstanding for term [2](term)
    - get unpaid term [3](term)
    - unpaid term [1](term)
    - outstanding term [2](term)
    - show balances term [3](term)
    - list unpaid term [1](term)
    - get outstanding term [2](term)
    - unpaid invoices term [3](term)
    
    # Just year (no term - should use current term or show error)
    - unpaid invoices for [2025](academic_year)
    - outstanding for [2025](academic_year)
    - show unpaid [2025](academic_year)
    - get unpaid for year [2025](academic_year)
    - unpaid [2024](academic_year)
    - outstanding invoices [2025](academic_year)
    
    # Natural variations
    - who owes fees for [2025](academic_year) term [3](term)
    - show me who hasn't paid [2025](academic_year) term [3](term)
    - which students owe for [2025](academic_year) term [1](term)
    - get list of unpaid [2025](academic_year) term [2](term)
    - show outstanding fees [2025](academic_year) term [3](term)
    - unpaid student fees [2025](academic_year) term [1](term)
    - who still owes term [3](term) [2025](academic_year)
    - show me unpaid students [2025](academic_year) term [3](term)



- intent: cancel_invoice
  examples: |
    - cancel invoice for [Eric](student_name)
    - cancel [John Doe](student_name) invoice
    - cancel invoice for [5555](admission_no)
    - void invoice for [Eric Mwirichia](student_name)
    - cancel [#5555](admission_no) invoice
    - void [123](admission_no) invoice
    - cancel invoice for student [Eric](student_name)
    - delete invoice for [John](student_name)
    - remove invoice for [Mary Jane](student_name)
    - cancel [Alice Wonder](student_name) invoice for term [3](term)


- intent: record_payment
  examples: |
    - record payment of [25000](amount) for [Brian](student_name) [7777](admission_no) via [MPESA](payment_method) ref [TX123](txn_ref)
    - payment of [10000](amount) for [Eric](student_name) admission [5555](admission_no) via [MPESA](payment_method) txn [ABC123](txn_ref)
    - pay [15000](amount) for student [12345](admission_no) via [cash](payment_method)
    - record [20000](amount) payment for [John Doe](student_name) via [bank transfer](payment_method) ref [BT456](txn_ref)
    - payment [5000](amount) for [Mary](student_name) [9999](admission_no) via [cheque](payment_method)
    - add payment of [30000](amount) for [#7777](admission_no) via [MPESA](payment_method) reference [TX789](txn_ref)
    - record [25000](amount) for [Brian](student_name) via [MPESA](payment_method) txn [TX123](txn_ref)
    - pay [10000](amount) for [7777](admission_no) [MPESA](payment_method) ref [ABC123](txn_ref)
    - payment of [15,000](amount) for student [Eric Mwirichia](student_name) via [cash](payment_method)
    - record payment [20000](amount) for [5555](admission_no) [bank](payment_method) ref [BT999](txn_ref)
    - pay [50000](amount) for [John](student_name) via [MPESA](payment_method) transaction [MPS123](txn_ref)
    - add [25000](amount) payment for [123](admission_no) via [cash](payment_method)
    - record [30000](amount) for student [Mary Jane](student_name) via [cheque](payment_method) ref [CHQ456](txn_ref)
    - payment [40000](amount) for [Alice Wonder](student_name) admission [456](admission_no) via [MPESA](payment_method)
    - pay [12500](amount) for [#789](admission_no) via [bank transfer](payment_method) ref [BT888](txn_ref)
    - record payment of [25000](amount) for [Brian](student_name) [7777](admission_no) via [MPESA](payment_method) ref [TX123](txn_ref)
    - payment of [10000](amount) for [Eric](student_name) admission [5555](admission_no) via [MPESA](payment_method) txn [ABC123](txn_ref)
    - pay [15000](amount) for student [12345](admission_no) via [cash](payment_method)
    - record [20000](amount) payment for [John Doe](student_name) via [bank transfer](payment_method) ref [BT456](txn_ref)
    
    # NEW: Natural "has paid" patterns
    - [Eric Mwirichia](student_name), student [#5555](admission_no) has just paid [5000](amount) kes using [mpesa](payment_method)
    - [John Doe](student_name) [#123](admission_no) has paid [10000](amount) via [mpesa](payment_method)
    - [Brian Otieno](student_name) student [7777](admission_no) just paid [15000](amount) using [cash](payment_method)
    - [Alice Wonder](student_name) [456](admission_no) has paid [20000](amount) kes via [bank transfer](payment_method)
    - student [#5555](admission_no) [Eric](student_name) paid [5000](amount) using [mpesa](payment_method)
    - [Sarah Njeri](student_name) [2345](admission_no) just paid [8000](amount) kes [mpesa](payment_method)
    - [Mary Jane](student_name) student [#999](admission_no) has paid [12000](amount) via [cash](payment_method)
    - [James Kariuki](student_name) [7777](admission_no) paid [25000](amount) using [bank](payment_method)
    
    # With "shillings" instead of "kes"
    - [Eric](student_name) [#5555](admission_no) has paid [5000](amount) shillings via [mpesa](payment_method)
    - [John](student_name) student [123](admission_no) paid [10000](amount) shillings using [cash](payment_method)
    
    # Without explicit payment method
    - [Eric Mwirichia](student_name) [#5555](admission_no) has paid [5000](amount)
    - [John Doe](student_name) student [123](admission_no) paid [15000](amount) kes
    - student [#7777](admission_no) [Brian](student_name) just paid [8000](amount)
    
    # With transaction reference
    - [Eric](student_name) [5555](admission_no) paid [5000](amount) via [mpesa](payment_method) ref [ABC123](txn_ref)
    - [John](student_name) [#123](admission_no) has paid [10000](amount) using [mpesa](payment_method) transaction [TX456](txn_ref)

- intent: add_guardian
  examples: |
    # ==========================================
    # CRITICAL: "add [relationship] to [student]" patterns
    # ==========================================
    - add [father](relationship) to [Max Otieno](student_name)
    - add [mother](relationship) to [Eric Mwirichia](student_name)
    - add [mother](relationship) to [John Doe](student_name)
    - add [father](relationship) to [Brian Otieno](student_name)
    - add [guardian](relationship) to [Alice Wonder](student_name)
    - add [uncle](relationship) to [Sarah Lee](student_name)
    - add [aunt](relationship) to [Mary Jane](student_name)
    - add [father](relationship) for [Max](student_name)
    - add [mother](relationship) for [Eric](student_name)
    - add [guardian](relationship) for [Brian](student_name)
    
    # With "a" or "the"
    - add a [father](relationship) to [Max Otieno](student_name)
    - add the [mother](relationship) to [Eric](student_name)
    - add a [guardian](relationship) for [Brian](student_name)
    
    # "Register" variations
    - register [father](relationship) to [Max Otieno](student_name)
    - register [mother](relationship) for [Eric](student_name)
    - register a [guardian](relationship) to [Brian](student_name)
    
    # Common natural phrasings
    - add [mom](relationship) to [Max](student_name)
    - add [dad](relationship) to [Eric](student_name)
    - add [mum](relationship) for [Brian](student_name)
    - add his [father](relationship) to [Max Otieno](student_name)
    - add her [mother](relationship) to [Sarah Lee](student_name)

- intent: get_guardians
  examples: |
    - show guardians for [Eric](student_name)
    - who is the parent of [Brian Otieno](student_name)
    - get guardians for student [7777](admission_no)
    - show parents for [5555](admission_no)
    - guardians for [Alice Wonder](student_name)
    - show me parents of [John Doe](student_name)
    - list guardians for [Eric](student_name)
    - who are [John](student_name) guardians
    - show [#123](admission_no) parents
    - guardians of [Mary](student_name)
    - parents of student [456](admission_no)

- intent: list_students_without_guardians
  examples: |
    - show students without guardians
    - list students with no parents
    - which students don't have guardians
    - students without parents
    - unlinked students
    - show students needing guardian info

- lookup: relationship
  examples: |
    - Mother
    - Father
    - Guardian
    - Uncle
    - Aunt
    - Grandmother
    - Grandfather
    - Sister
    - Brother
    - Relative


- intent: notify_pending_invoices
  examples: |
    # Basic patterns
    - notify parents about pending invoices
    - send payment reminders to guardians
    - notify guardians about unpaid fees
    - remind guardians about unpaid invoices
    - send payment notifications
    - notify all parents about fees
    - email guardians about pending payments
    - send a fee reminder to all guardians for students with a fee balance
    - send fee reminder to guardians with balance
    - notify guardians about fee balance
    - send reminder to parents with outstanding balance
    - remind guardians about fee balance
    - send fee reminders to all guardians
    - notify parents about outstanding balance
    - send payment reminder to guardians with balance
    - remind all guardians about fees
    - send fee balance reminder to parents
    - notify guardians with unpaid balance
    - send reminders to guardians with fee balance
    - remind parents about outstanding fees
    - send fee reminder to all parents
    - notify guardians about pending balance
    - send balance reminder to guardians
    - remind parents with fee balance
    - send payment reminders for outstanding balance
    - notify all guardians about fee balance
    - send reminder about unpaid fees to guardians
    - remind parents to pay their fee balances
    - remind parents to pay fees
    - notify parents about fee payments
    
    # With term/year specificity
    - send email reminders for term [3](term) [2025](academic_year)
    - notify parents about pending payments for [2025](academic_year) term [1](term)
    - send invoice reminders for term [2](term)
    - send fee reminder for [2025](academic_year) term [3](term)
    - notify guardians about balance for term [1](term)
    - send reminder about fee balance for [2025](academic_year) term [2](term)
    - remind parents about outstanding balance term [3](term)
    - remind parents to pay their fee balances for [2025](academic_year) term [3](term)
    - send payment reminders for [2025](academic_year) term [1](term)
    - notify guardians about unpaid fees for term [2](term) [2025](academic_year)
    - remind parents about fees for [2024](academic_year) term [3](term)
    
    # NEW: With due dates
    - remind parents to pay their fee balances by [Saturday](due_date)
    - remind parents to pay by [Monday](due_date)
    - send fee reminders due by [Friday](due_date)
    - notify parents about pending invoices due [next week](due_date)
    - remind guardians to pay by [December 15](due_date)
    - send payment reminders due [end of month](due_date)
    - notify parents to pay fees by [this weekend](due_date)
    - remind guardians about balance due [tomorrow](due_date)
    - send fee reminder due by [January 31st](due_date)
    - notify parents fees are due [next Friday](due_date)
    - remind parents to pay by [end of week](due_date)
    - send payment reminders due [15th](due_date)
    - notify guardians to settle balance by [Sunday](due_date)
    
    # NEW: With term/year AND due dates
    - remind parents to pay [2025](academic_year) term [3](term) fees by [Saturday](due_date)
    - send fee reminders for term [1](term) [2025](academic_year) due by [Monday](due_date)
    - notify guardians about [2025](academic_year) term [2](term) balance due [Friday](due_date)
    - remind parents about term [3](term) fees due by [end of month](due_date)
    - send payment reminders for [2025](academic_year) term [1](term) due [next week](due_date)

- intent: set_primary_guardian
  examples: |
    - make [Mary Wanjiku](guardian_name) the primary guardian for student [2345](admission_no)
    - set [John Doe](guardian_name) as primary for [Eric](student_name)
    - make [Peter Mwangi](guardian_name) primary guardian for [5555](admission_no)
    - set [Jane Smith](guardian_name) as the primary contact for student [7777](admission_no)
    - change primary guardian to [David Kariuki](guardian_name) for [Brian Otieno](student_name)
    - make [Sarah Akinyi](guardian_name) the main contact for [1234](admission_no)
    - set primary guardian [Grace Mutua](guardian_name) for student [Alice Wonder](student_name)
    - change primary contact to [James Kamau](guardian_name) for [9999](admission_no)

- intent: update_guardian
  examples: |
    - update [Eric Mwirichia](guardian_name) email to [eric@gmail.com](email)
    - change [Mary Wanjiku](guardian_name) phone to [0712345678](phone)
    - update guardian [John Doe](guardian_name) with email [john@example.com](email) and phone [0722334455](phone)
    - set email [jane@gmail.com](email) for guardian [Jane Smith](guardian_name)
    - change [Peter Mwangi](guardian_name) contact to [peter@gmail.com](email)
    
    # NEW: More natural patterns
    - update guardian for [Sarah](student_name) called [Eric Mwirichia](guardian_name) adding email [eric@gmail.com](email)
    - update [Eric Mwirichia](guardian_name) for student [2345](admission_no) with email [eric@gmail.com](email)
    - add email [eric@gmail.com](email) for [Eric Mwirichia](guardian_name)
    - set [Eric Mwirichia](guardian_name) email as [eric@gmail.com](email)
    - update [Eric](guardian_name) guardian email [eric@gmail.com](email)
    - change email for [Eric Mwirichia](guardian_name) to [eric@gmail.com](email)
    - update [Mary Wanjiku](guardian_name) add phone [0712345678](phone)
    - add phone [0722334455](phone) for guardian [John Doe](guardian_name)
    - update guardian [Eric Mwirichia](guardian_name) email [eric@gmail.com](email) phone [0722517627](phone)

- intent: send_guardian_message
  examples: |
    - send a message to [Eric](student_name) parent about [coming to school this friday](message)
    - notify [Sarah](student_name) guardian about [parent teacher meeting](message)
    - send message to [Brian Otieno](student_name) parent saying [please bring homework](message)
    - message [2345](admission_no) parent about [school event tomorrow](message)
    - notify guardian of [5555](admission_no) about [fee payment deadline](message)
    - send [Alice Wonder](student_name) parent a message about [bringing lunch box](message)
    - tell [John](student_name) guardian about [sports day on saturday](message)
    - message [7777](admission_no) parent [urgent: pick up child early](message)
    - notify [Eric Mwirichia](student_name) parent [medical checkup required](message)
    - send to [Sarah Njeri](student_name) guardian [parent meeting this week](message)
    
    # ADD MORE PATTERNS WITH #
    - send a notification to student [#123](admission_no) guardians to [come to school tomorrow](message)
    - send notification to [#456](admission_no) parent about [meeting tomorrow](message)
    - notify [#789](admission_no) guardian to [come to school](message)
    - message student [#5555](admission_no) parents about [urgent matter](message)
    - send message to [#7777](admission_no) guardians [come pick up student](message)
    - notify student [#999](admission_no) parent [bring documents tomorrow](message)
    - send notification to [#111](admission_no) guardians about [school event](message)
    - message [#222](admission_no) parent to [attend meeting](message)
    - notify [#333](admission_no) guardian [student needs pickup](message)
    - send to [#444](admission_no) parents [important announcement](message)
    
    # WITH "STUDENT" KEYWORD
    - send notification to student [#123](admission_no) about [come tomorrow](message)
    - notify student [#456](admission_no) guardians [parent meeting](message)
    - message student [#789](admission_no) parents [urgent](message)
    - send to student [#999](admission_no) guardian [pickup required](message)

- intent: get_school_info
  examples: |
    - what is the name of our school?
    - what school is this?
    - tell me about our school
    - school information
    - what's the school name?
    - which school am I in?
    - school details
    - show school info
    - what school are we managing?
    - school name
    - our school name
    - what is our school called?
    - school information please
    - give me school details

- intent: complete_term
  examples: |
    - close term [1](term)
    - close term [2](term)
    - close term [3](term)
    - end term [1](term)
    - end term [2](term)
    - end term [3](term)
    - complete term [1](term)
    - complete term [2](term)
    - complete term [3](term)
    - finish term [1](term)
    - finish term [2](term)
    - finish term [3](term)
    - mark term [1](term) as complete
    - mark term [2](term) as complete
    - mark term [3](term) as complete
    - deactivate term [1](term)
    - deactivate term [2](term)
    - deactivate term [3](term)
    - close term [1](term) for [2025](academic_year)
    - end term [2](term) for [2025](academic_year)
    - complete term [3](term) for [2025](academic_year)


- intent: affirm_send_payment_notification
  examples: |
    - yes
    - yes send it
    - send notification
    - notify them
    - yes please
    - send it
    - yes notify
    - notify the guardian
    - send the notification
    - yes send notification
    - notify parent
    - send to parent
    - yes inform them

- intent: deny_send_payment_notification
  examples: |
    - no
    - no thanks
    - don't send
    - skip
    - not now
    - no notification
    - don't notify
    - skip notification


- intent: list_students_with_balances
  examples: |
    - list students with fee balances
    - show students with balances
    - students with outstanding balances
    - which students have balances
    - students with fee balances
    - show me students with balances
    - list students who owe fees
    - students with unpaid fees
    - which students owe money
    - show students who have balances
    - students owing fees
    - list students with outstanding fees
    - students with pending balances
    - show me students who owe
    - which students have fee balances
    - students with unpaid balances
    - list students owing money
    - students with outstanding payments
    - show students with fee debt
    - which students have unpaid fees
    - who owes fees
    - which students owe
    - students owing money
    - show me who has balances
    - list students with debt
    - students with outstanding amounts
    - who hasn't paid completely
    - students with partial payments
    - show students with remaining balances
    
    # With term/year
    - list students with balances for [2025](academic_year) term [3](term)
    - show students with fee balances in term [1](term)
    - students with balances for [2025](academic_year) term [2](term)
    - which students owe fees for term [3](term) [2025](academic_year)
    - students with outstanding balances in [2025](academic_year) term [1](term)
    
    # With class
    - list students with balances in [Grade 4](class_name)
    - show [8A](class_name) students with fee balances
    - students with balances in [Form 1](class_name)
    - which [Grade 5B](class_name) students have balances
    - [PP1](class_name) students with outstanding fees

- intent: notify_parents_with_balances
  examples: |
    - send notifications to parents with students having fee balances
    - notify parents of students with balances
    - send reminders to guardians with unpaid fees
    - notify all parents with outstanding balances
    - send fee reminders to parents who owe
    - notify guardians with unpaid invoices
    - send payment reminders to parents with balances
    - notify all parents with fee balances
    - send notifications to parents with unpaid fees
    - remind guardians about outstanding fees
    - notify parents about unpaid balances
    - send fee notifications to parents with balances
    - notify guardians with outstanding invoices
    - send reminders about unpaid fees
    - notify all parents who owe fees
    
    # With term/year
    - notify parents with balances for [2025](academic_year) term [3](term)
    - send reminders to parents with unpaid fees for term [1](term)
    - notify guardians with balances in [2025](academic_year) term [2](term)

- intent: broadcast_message_to_all_parents
  examples: |
    # Generic broadcast (no specific message)
    - send a message to all parents
    - notify all parents
    - send message to all guardians
    - broadcast to all parents
    - send notification to all guardians
    - message all parents
    - notify every parent
    - send to all parents
    - broadcast message to guardians
    - send announcement to all parents
    - notify all guardians about something
    - send a broadcast to parents
    - message every guardian
    - send to all guardians
    - broadcast to every parent
    
    # CRITICAL: "to [verb]" patterns - most natural form
    - send a message to all parents to [come for a meeting tomorrow](message)
    - send message to all parents to [come for a meeting tomorrow](message)
    - notify all parents to [attend parent meeting](message)
    - message all parents to [come to school tomorrow](message)
    - send to all parents to [bring documents](message)
    - broadcast to all parents to [come for meeting](message)
    - tell all parents to [attend event tomorrow](message)
    - notify all guardians to [come for meeting](message)
    - send all parents message to [come tomorrow](message)
    - message all guardians to [come to school](message)
    - send notification to all parents to [come for meeting](message)
    - broadcast message to all parents to [attend tomorrow](message)
    - tell all guardians to [come for event](message)
    - send to all guardians to [attend meeting](message)
    - notify every parent to [come to school tomorrow](message)
    - message every guardian to [bring documents](message)
    - send all parents to [come for meeting tomorrow](message)
    - broadcast to every parent to [attend meeting](message)
    
    # "about [topic]" patterns
    - broadcast to all parents about [school event](message)
    - message all parents about [important announcement](message)
    - send to all guardians about [fee payment deadline](message)
    - notify every parent about [school closure](message)
    - send announcement to all parents about [upcoming event](message)
    - broadcast message to all guardians about [urgent matter](message)
    - notify all parents about [sports day](message)
    - send to all parents about [examination schedule](message)
    
    # Direct message content patterns
    - broadcast [urgent notice](message) to all parents
    - send [meeting invitation](message) to all guardians
    - message all parents [school closes early tomorrow](message)
    - notify all guardians [parent meeting this friday](message)
    - send all parents [bring student ID cards](message)
    - broadcast [no classes on monday](message) to every parent

- intent: cancel_form
  examples: |
    - cancel
    - stop
    - quit
    - exit
    - forget it
    - never mind
    - cancel this
    - stop this form
    - I don't want to continue
    - leave it
    - abort
    - cancel form
    - stop form
    - cancel student creation
    - I changed my mind
    - not now

- intent: restart_form
  examples: |
    - start over
    - restart
    - reset
    - let's begin again
    - I want to start from scratch
    - redo this
    - start again
    - restart form
    - begin again
    - fresh start
    - restart student creation

- intent: resume_form
  examples: |
    - continue
    - yes continue
    - let's continue
    - keep going
    - resume
    - go on
    - yes let's continue
    - continue from where we left off

- intent: stop_form
  examples: |
    - stop
    - halt
    - pause
    - wait
    - hold on
    - stop this
    - stop the form
    - stop creating student

- intent: list_academic_years
  examples: |
    - list academic years
    - show academic years
    - list all academic years
    - show all years
    - what academic years do we have
    - show years
    - list years
    - display academic years
    - get all academic years
    - show me the academic years
    - what years are available
    - years in the system
    - available academic years
    - show me all years
    - list all years
    - academic years

- intent: add_stream_to_class
  examples: |
    - add stream [Red](stream) to class [8](class_name)
    - add stream [Blue](stream) to class [8](class_name)
    - create stream [East](stream) for class [Grade 4](class_name)
    - add [Red](stream) stream to [8](class_name)
    
    # NEW: Multiple streams in one command
    - add streams [Red](stream) and [Blue](stream) to class [8](class_name)
    - add [Yellow](stream) and [Red](stream) to class [2](class_name)
    - create streams [East](stream) and [West](stream) for [Grade 4](class_name)
    - add [Maroon](stream) and [Indigo](stream) to [6](class_name)
    - add streams [Red](stream), [Blue](stream) and [Green](stream) to class [8](class_name)
    - create [Yellow](stream), [Red](stream) and [Purple](stream) for class [5](class_name)
    - add [A](stream) and [B](stream) to class [Form 1](class_name)
    - create streams [North](stream), [South](stream), [East](stream) and [West](stream) for [7](class_name)
    
    # Existing single stream patterns
    - lets add a stream to class [8](class_name) we call it [red](stream)
    - add stream to class [8](class_name) called [8 red](stream)
    - add stream to class [8](class_name) called [red](stream)
    - create [West](stream) stream for [7](class_name)
    - add stream [North](stream) to class [Grade 5](class_name)
    - add stream [Marvel](stream) to class [6](class_name)
    - create stream [Maroon](stream) for class [7](class_name)
    - add [Phoenix](stream) to class [8](class_name)
    - add stream [Eagle](stream) to [5](class_name)
    - create stream [Lion](stream) for [9](class_name)
    - add [Turquoise](stream) stream to class [6](class_name)
    - add stream [Crimson](stream) to [7](class_name)
    - create [Violet](stream) stream for class [8](class_name)

- intent: list_streams
  examples: |
    - show streams for class [8](class_name)
    - list streams for [Grade 4](class_name)
    - what streams does class [8](class_name) have
    - show me streams for [7](class_name)
    - streams for class [Form 1](class_name)


- intent: provide_student_details
  examples: |
    # Mixed alphanumeric admission numbers
    - [John Doe](student_name), [A123](admission_no), class [Grade 5](class_name)
    - [Mary Jane](student_name), [1B7](admission_no), [Grade 4](class_name)
    - [Peter Kim](student_name), [K456](admission_no), class [8A](class_name)
    - [Sarah Lee](student_name), [2C9](admission_no), [Form 1](class_name)
    - [James Bond](student_name), [007A](admission_no), class [7B](class_name)
    - [Alice Wong](student_name), [B123](admission_no), [6 Red](class_name)
    - [Bob Smith](student_name), [1A2B](admission_no), class [5 Blue](class_name)
    - [Carol White](student_name), [X999](admission_no), [9 Green](class_name)

    # Comma-separated format (name, admission, class)
    - [Joan Nyambu](student_name), [234](admission_no), class [1 Baba](class_name)
    - [Mary Wanjiru](student_name), [123](admission_no), [Grade 5](class_name)
    - [Peter Mwangi](student_name), [456](admission_no), class [8A](class_name)
    - [Sarah Akinyi](student_name), [789](admission_no), [Form 2](class_name)
    - [James Otieno](student_name), [321](admission_no), class [7 Blue](class_name)
    - [Grace Mutua](student_name), [654](admission_no), [6 Red](class_name)
    - [David Kimani](student_name), [987](admission_no), class [5 White](class_name)
    - [Faith Njeri](student_name), [111](admission_no), [9 Green](class_name)
    - [Eric Maina](student_name), [222](admission_no), class [4 East](class_name)
    - [Lucy Chebet](student_name), [333](admission_no), [8 North](class_name)
    - [Moses Kiprop](student_name), [444](admission_no), class [3 A](class_name)
    
    # Just name and admission
    - [John Doe](student_name), [123](admission_no)
    - [Mary Jane](student_name), [456](admission_no)
    - [Peter Kim](student_name), [789](admission_no)
    
    # Just name and class
    - [John Doe](student_name) in [Grade 5](class_name)
    - [Mary Jane](student_name) class [8A](class_name)
    - [Peter Kim](student_name) to [Form 2](class_name)
    
    # Natural responses to form questions
    - name is [John Doe](student_name) admission [123](admission_no) class [8A](class_name)
    - [Mary Jane](student_name) with number [456](admission_no) in [Grade 5](class_name)
    - the student is [Peter Kim](student_name) number [789](admission_no) for [Form 2](class_name)



- intent: inform_name
  examples: |
    - Robin ohara
    - Robin O'Hara
    - Robin O Hara
    - John Smith
    - Mary Johnson
    - David Brown
    - Sarah Wilson
    - Michael Davis
    - Jennifer Miller
    - Robert Taylor
    - [Robin ohara](student_name)
    - [Robin O'Hara](student_name)
    - [Robin O Hara](student_name)
    - [John Smith](student_name)
    - [Mary Johnson](student_name)
    - my name is [Robin ohara](student_name)
    - the student name is [Robin O'Hara](student_name)
    - call the student [Robin ohara](student_name)
    - it's [Robin ohara](student_name)
    - [Robin ohara](student_name) is the name


- intent: list_all_guardians
  examples: |
    - list all guardians
    - show all guardians
    - list guardians
    - show guardians
    - get all guardians
    - display all guardians
    - show me all guardians
    - list all parents
    - show all parents
    - guardians list
    - parents list
    - all guardians
    - all parents
    - show me guardians
    - display guardians
    - view all guardians
    - guardians in the system
    - show parent list
    - list parent contacts


- intent: add_guardian
  examples: |
    # ==========================================
    # COMPLETE INFO (all details provided)
    # ==========================================
    - Add [Mary Wanjiku](guardian_name), [mother](relationship) to [Eric](student_name) with phone [0712345678](phone) and email [mary@gmail.com](email)
    - Add [John Mwangi](guardian_name) ([father](relationship)) for student [2345](admission_no) phone [0722123456](phone) email [john@gmail.com](email)
    - Register [Jane Njeri](guardian_name) as [guardian](relationship) for [Sarah](student_name) with phone [0733456789](phone) and email [jane@gmail.com](email)
    - Add guardian [Peter Kamau](guardian_name) ([uncle](relationship)) to student [#1234](admission_no) phone [0711222333](phone) email [peter@gmail.com](email)
    - Create guardian [Grace Wanjiru](guardian_name), [mother](relationship) for [Kevin](student_name), phone [0712345678](phone), email [grace@gmail.com](email)
    
    # ==========================================
    # PARTIAL INFO (will trigger form)
    # ==========================================
    - add [mother](relationship) to [Max Otieno](student_name)
    - add [father](relationship) to [John](student_name)
    - add [mother](relationship) for [Eric](student_name)
    - add [father](relationship) for student [#2345](admission_no)
    - register [mother](relationship) to [Sarah](student_name)
    - register [father](relationship) for [Kevin](student_name)
    - add [guardian](relationship) to [Mary](student_name)
    - add [uncle](relationship) for [Peter](student_name)
    - create [mother](relationship) for [Jane](student_name)
    - add [grandmother](relationship) to [Lucy](student_name)
    - register [grandfather](relationship) for [Tom](student_name)
    - add [aunt](relationship) to student [#5678](admission_no)
    
    # ==========================================
    # MINIMAL INFO (name + relationship only)
    # ==========================================
    - add [Mary Wanjiku](guardian_name) as [mother](relationship)
    - register [John Kamau](guardian_name) as [father](relationship)
    - add [Grace Njeri](guardian_name) ([mother](relationship))
    - create guardian [Peter Mwangi](guardian_name) as [uncle](relationship)
    - add [Jane Wanjiru](guardian_name) as [guardian](relationship)
    
    # ==========================================
    # STUDENT SPECIFIED BY NAME
    # ==========================================
    - add [Mary Wanjiku](guardian_name) for [Eric](student_name)
    - register [John Kamau](guardian_name) for student [Max](student_name)
    - add guardian [Grace Njeri](guardian_name) to [Sarah](student_name)
    - create [Peter Mwangi](guardian_name) for [Kevin Njoroge](student_name)
    
    # ==========================================
    # STUDENT SPECIFIED BY ADMISSION NUMBER
    # ==========================================
    - add [Mary Wanjiku](guardian_name) for student [#2345](admission_no)
    - register [John Kamau](guardian_name) for [#1234](admission_no)
    - add guardian [Grace Njeri](guardian_name) to student [5678](admission_no)
    - create [Peter Mwangi](guardian_name) for [#4567](admission_no)
    
    # ==========================================
    # WITH PHONE ONLY
    # ==========================================
    - add [Mary Wanjiku](guardian_name) with phone [0712345678](phone) for [Eric](student_name)
    - register [John Kamau](guardian_name) phone [0722123456](phone) for student [#2345](admission_no)
    - add [Grace Njeri](guardian_name) ([mother](relationship)) phone [0733456789](phone) to [Sarah](student_name)
    
    # ==========================================
    # WITH EMAIL ONLY
    # ==========================================
    - add [Mary Wanjiku](guardian_name) with email [mary@gmail.com](email) for [Eric](student_name)
    - register [John Kamau](guardian_name) email [john@gmail.com](email) for [Max](student_name)
    
    # ==========================================
    # COMMON NATURAL PHRASES
    # ==========================================
    - add [mom](relationship) to [Eric](student_name)
    - add [dad](relationship) to [Max](student_name)
    - register [mum](relationship) for [Sarah](student_name)
    - add [mommy](relationship) to [Kevin](student_name)
    - add [daddy](relationship) for [Jane](student_name)
    - add his [mother](relationship)
    - add her [father](relationship)
    - register his [guardian](relationship)
    - add the [mother](relationship) to [Lucy](student_name)
    - add the [father](relationship) for student [#1234](admission_no)
    
    # ==========================================
    # QUESTION FORMS
    # ==========================================
    - can you add [Mary Wanjiku](guardian_name) as [mother](relationship) for [Eric](student_name)?
    - please add [John Kamau](guardian_name) for student [#2345](admission_no)
    - I want to add [Grace Njeri](guardian_name) as [guardian](relationship)
    - could you register [Peter Mwangi](guardian_name) for [Max](student_name)?
    - I need to add [mother](relationship) to [Sarah](student_name)
    - can I add [father](relationship) for [Kevin](student_name)?
    
    # ==========================================
    # ACTION VERBS
    # ==========================================
    - register [Mary Wanjiku](guardian_name) as [mother](relationship) for [Eric](student_name)
    - create guardian [John Kamau](guardian_name) for [Max](student_name)
    - link [Grace Njeri](guardian_name) to [Sarah](student_name)
    - assign [Peter Mwangi](guardian_name) as [father](relationship) to student [#1234](admission_no)
    - connect [Jane Wanjiru](guardian_name) to [Kevin](student_name)
    
    # ==========================================
    # SHORT FORMS
    # ==========================================
    - add guardian [Mary](guardian_name)
    - register parent [John](guardian_name)
    - add parent for [Eric](student_name)
    - register guardian for student [#2345](admission_no)
    - add contact for [Max](student_name)

